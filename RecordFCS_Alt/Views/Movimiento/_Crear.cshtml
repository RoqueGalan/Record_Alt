@model RecordFCS_Alt.Models.Movimiento
@using RecordFCS_Alt.Helpers

@{
    SelectList GuionID = (SelectList)ViewBag.GuionID;
    SelectList LetraFolioID = (SelectList)ViewBag.LetraFolioID;
    List<string> listaCampos = ViewBag.listaCampos;



}

<h1 class="text-center text-capitalize"><b>Movimiento: </b>@Model.TipoMovimiento.Nombre</h1>

@using (Html.BeginForm("Crear", "Movimiento", FormMethod.Post, new { id = "FormMovCrear", name = "FormMovCrear" }))
{
    @Html.AntiForgeryToken()
    <div>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    </div>

    @Html.HiddenFor(model => model.HaciaExposicion)
    @Html.HiddenFor(model => model.EstadoMovimiento)
    @Html.HiddenFor(model => model.FechaRegistro)
    @Html.HiddenFor(model => model.FolioMovimiento)
    @Html.HiddenFor(model => model.TipoMovimientoID)

    <ul class="nav nav-tabs">

        <li class="active" id="pes_origenDestino"><a data-toggle="tab" href="#origenDestinoDIV"><i class="fa fa-globe"></i> Origen/Destino</a></li>

        @{

    if (Model.MovimientoSolicitante != null)
    {
        <li><a data-toggle="tab" href="#solicitanteDIV"><i class="fa fa-file-text-o"></i> Solicitante</a></li>
    }

    if (Model.MovimientoExposicion != null)
    {
        <li><a data-toggle="tab" href="#exposicionDIV"><i class="fa fa-object-group"></i> Exposición</a></li>
    }

    if (Model.MovimientoResponsable != null)
    {
        <li><a data-toggle="tab" href="#responsableDIV"><i class="fa fa-male"></i> Responsable</a></li>
    }

    if (Model.MovimientoAutorizacion != null)
    {
        <li><a data-toggle="tab" href="#autorizacionDIV"><i class="fa fa-thumbs-up"></i> Autorización</a></li>

    }
    if (Model.MovimientoTransporte != null)
    {
        <li><a data-toggle="tab" href="#transporteDIV"><i class="fa fa-truck"></i> Transporte</a></li>

    }
    if (Model.MovimientoSeguro != null)
    {
        <li><a data-toggle="tab" href="#seguroDIV"><i class="fa fa-shield"></i> Seguro</a></li>

    }

    <li><a data-toggle="tab" href="#piezasDIV"><i class="fa fa-list-ol"></i> Piezas</a></li>
            <li><a data-toggle="tab" href="#guardarDIV"><i class="fa fa-save"></i> Guardar</a></li>
        }

    </ul>

    <div class="tab-content">


        <div id="origenDestinoDIV" class="tab-pane fade in active">

            <div class="row">
                <div class="col-md-2">
                    <h3 class="text-center">Origen/Destino</h3>

                    <div class="text-center">
                        <span class="fa fa-globe fa-10x"></span>
                    </div>

                </div>

                <div class="col-md-10">
                    <br />

                    <div class="form-horizontal">

                        <div class="form-group">
                            @Html.LabelFor(model => model.UbicacionOrigenID, "Ubicación de Origen", htmlAttributes: new { @class = "control-label col-md-2 " })
                            <div class="col-md-10">
                                <div class="input-group">
                                    @Html.DropDownList("UbicacionOrigenID", null, "- Origen -", htmlAttributes: new { @class = "form-control enGuardar", required = "" })
                                    <span class="input-group-addon"></span>
                                    <input id="buscar_UbicacionOrigenID" type="text" placeholder="Buscar ubicación" class="form-control" />
                                    <span id="btnAccion_UbicacionOrigenID" name="Buscar" class="input-group-addon btn btn-primary">
                                        <span class="fa fa-search"></span>
                                    </span>
                                </div>

                                <p class="help-block">NOTA: Al seleccionar la ubicación origen, solo se mostratan las Obras/Piezas que coincidan con la misma.</p>
                                @Html.ValidationMessageFor(model => model.UbicacionOrigenID, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.UbicacionDestinoID, "Ubicación de Destino", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <div class="input-group">
                                    @Html.DropDownList("UbicacionDestinoID", null, " - Destino -", htmlAttributes: new { @class = "form-control enGuardar", required = "" })
                                    <span class="input-group-addon"></span>
                                    <input id="buscar_UbicacionDestinoID" type="text" placeholder="Buscar ubicación" class="form-control" />
                                    @if (User.IsInRole("ubiNew"))
                                    {
                                        <span class="input-group-addon">
                                            <input type="checkbox" id="checkAdd_UbicacionDestinoID" class="btnCheckAdd" data-toggle="tooltip" data-title="Buscar/Guardar">
                                        </span>
                                    }
                                    <span id="btnAccion_UbicacionDestinoID" name="Buscar" class="input-group-addon btn btn-primary">
                                        <span class="fa fa-search"></span>
                                    </span>

                                </div>
                                @Html.ValidationMessageFor(model => model.UbicacionDestinoID, "", new { @class = "text-danger" })
                            </div>
                        </div>



                        <div class="form-group">
                            @Html.LabelFor(model => model.FechaHoraMovimiento, "Fecha y Hora del Movimiento", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <div class="input-group date" id="FechaHoraMovimientoDTP">
                                    @Html.EditorFor(model => model.FechaHoraMovimiento, new { htmlAttributes = new { @class = "form-control enGuardar", readOnly = "", required = "" } })

                                    <div class="btn btn-primary input-group-addon" data-toggle="tooltip" title="Abrir calendario">
                                        <span class="fa fa-calendar"></span>
                                    </div>

                                </div>
                                @Html.ValidationMessageFor(model => model.FechaHoraMovimiento, "", new { @class = "text-danger" })
                            </div>

                            <script type="text/javascript">
                                $(function () {


                                    //alert('mo: ' + fechaLimite + '\n' +
                                    //    'c#: ' + '@Html.DisplayFor(model => model.FechaHoraMovimiento)'
                                    //    );

                                    @*alert("fecha simple: @Model.FechaHoraMovimiento");
        alert("fecha mod: @Html.DisplayFor(model => model.FechaHoraMovimiento)");*@

                                    $('#FechaHoraMovimientoDTP').datetimepicker({
                                        //defaultDate: '@Html.DisplayFor(model => model.FechaHoraMovimiento)',
                                        minDate: new Date(anio, mes - 1, dia), //limitar que no se seleccione fechas pasadas a hoy
                                        format: "DD/MM/YYYY hh:mm A", //formato: dia/mes/año hora:minuto AM/PM
                                        //locale: 'es',
                                        //disabledDates: [
                                        //    moment("12/25/2013"),
                                        //    new Date(2013, 11 - 1, 21),
                                        //    "11/22/2013 00:53"
                                        //],
                                        toolbarPlacement: 'top',
                                        showTodayButton: true,
                                        showClose: true,
                                        ignoreReadonly: true,
                                        useCurrent: false //Important! See issue #1075
                                    });

                                    $('#FechaHoraMovimientoDTP').on("dp.change", function (e) {
                                        $('#FechaHoraMovimiento').trigger("input");
                                    });

                                    $('#FechaHoraMovimientoDTP').on("dp.update", function (e) {
                                        $('#FechaHoraMovimiento').trigger("input");
                                    });

                                });
                            </script>

                            <script type="text/javascript">
                                $('#btnAccion_UbicacionDestinoID').on("click", function (e) {
                                    BtnAccion('UbicacionDestinoID');

                                })

                                $('#btnAccion_UbicacionOrigenID').on("click", function (e) {
                                    BtnAccion('UbicacionOrigenID');
                                })



                                function BtnAccion(attID) {
                                    var $inputSelect = $('#' + attID);
                                    var $itemSelected = $inputSelect.find('option:selected');
                                    var $btnCheck = $('#checkAdd_' + attID);
                                    var $inputBuscar = $('#buscar_' + attID);

                                    var $btn = $('#btnAccion_' + attID);

                                    if ($btn.attr("name") == "Agregar") {
                                        //alert("entro a agregar");

                                        var myUrl = '@Url.Action("Crear", "Ubicacion", new { EsRegistroObra = true })';

                                        $.ajaxSetup({ cache: false });

                                        $('#miModalContenido').load(myUrl, function () {
                                            $('#Nombre').val($inputBuscar.val());

                                            $('#miModal').modal({
                                                backdrop: 'static',
                                                keyboard: true
                                            }, 'show');

                                            bindForm_ListaUbicacion(this, attID);
                                        });

                                        function bindForm_ListaUbicacion(dialog, attID) {

                                            $('form', dialog).submit(function (e) {

                                                var validarOK = false;


                                                validarOK = $(this).validate().valid();

                                                if (validarOK) {
                                                    $.ajax({
                                                        url: this.action,
                                                        type: this.method,
                                                        data: $(this).serialize(),
                                                        success: function (result) {
                                                            if (result.success) {
                                                                $('#miModal').modal('hide');

                                                                $('#buscar_' + attID).val(result.nombre);

                                                                $('#checkAdd_' + attID).trigger("click");
                                                                $('#btnAccion_' + attID).trigger("click");

                                                                $('#alertasDiv').load('/Base/_Alertas');

                                                            } else {
                                                                $('#miModalContenido').html(result);
                                                                bindForm_ListaUbicacion(dialog);
                                                            }
                                                        }
                                                    });
                                                }
                                                return false;
                                            });

                                        }

                                        //mostrar modal para confirmar el campo que se va agregar

                                    }
                                    else {

                                        $.ajaxSetup({ cache: false });

                                        var myUrl = '@Url.Action("GenerarLista", "Ubicacion", null)';

                                        $inputSelect.html('<option> Cargando... </option>');

                                        $.ajax({
                                            url: myUrl,
                                            type: 'POST',
                                            data: { Filtro: $inputBuscar.val() },
                                            dataType: 'json',
                                            success: function (result) {

                                                if (result.length) {
                                                    $inputSelect.html('<option value=""> - Elije un resultado - </option>');

                                                    for (var i = 0; i < result.length; i++) {
                                                        $inputSelect.append('<option value ="' + result[i].UbicacionID + '">' + result[i].Nombre + '</option>');
                                                    }
                                                    $($inputSelect).val("");
                                                    $($inputSelect).trigger("change");
                                                }
                                                else {
                                                    $inputSelect.html('<option value=""> - Sin resultados - </option>');
                                                    $($inputSelect).val("");
                                                    $($inputSelect).trigger("change");

                                                    //alert($($inputSelect).val());
                                                }


                                            }
                                        });

                                        $inputSelect.focus();

                                    }
                                };



                                $('#checkAdd_UbicacionDestinoID').on("click", function (e) {
                                    BtnCheck('UbicacionDestinoID');
                                })

                                $('#checkAdd_UbicacionOrigenID').on("click", function (e) {
                                    BtnCheck('UbicacionOrigenID');
                                })


                                function BtnCheck(attID) {
                                    var $btnCheck = $('#checkAdd_' + attID);
                                    var $btn = $('#btnAccion_' + attID);
                                    var $inputBuscar = $('#buscar_' + attID);


                                    if ($btnCheck.is(':checked')) {
                                        $btn.attr("name", "Agregar");
                                        $btn.html('<span class="fa fa-floppy-o"></span>');
                                        $btn.removeClass("btn-default");
                                        $btn.addClass("btn-success");

                                        $inputBuscar.attr("placeholder", "Guardar valor");

                                    }
                                    else {
                                        $btn.attr("name", "Buscar");
                                        $btn.html('<span class="fa fa-search"></span>');
                                        $btn.removeClass("btn-success");
                                        $btn.addClass("btn-default");

                                        $inputBuscar.attr("placeholder", "Buscar valor");

                                    }
                                };

                            </script>

                            <script type="text/javascript">

                                function origenDestinoAlertaAdd() {
                                    var claseAlerta = "animated bounce infinite";
                                    $('#pes_origenDestino').addClass(claseAlerta);
                                }

                                function origenDestinoAlertaDel() {
                                    var claseAlerta = "animated bounce infinite";
                                    $('#pes_origenDestino').removeClass(claseAlerta);
                                }


                                function ubicacionOrigenIDAdd() {
                                    var claseAlerta = "animated pulse infinite";
                                    $('#UbicacionOrigenID').addClass(claseAlerta);
                                }

                                function ubicacionOrigenIDDel() {
                                    var claseAlerta = "animated pulse infinite";
                                    $('#UbicacionOrigenID').removeClass(claseAlerta);
                                }


                                $('#UbicacionOrigenID').on("change", function (e) {

                                    //alert($(this).val());

                                    //$(this).val(""); //resetear SELECT

                                    if ($(this).val() == $('#UbicacionDestinoID').val()) {
                                        $('#UbicacionDestinoID').val("");
                                    }

                                    if ($(this).val() == "") {
                                        origenDestinoAlertaAdd();
                                        ubicacionOrigenIDAdd();
                                    }
                                    else {
                                        origenDestinoAlertaDel();
                                        ubicacionOrigenIDDel();
                                    }

                                    $('#refrescarListaTemporal').trigger("click");

                                });

                                $('#UbicacionDestinoID').on("change", function (e) {
                                    if ($(this).val() == $('#UbicacionOrigenID').val()) {
                                        $(this).val("");
                                    }
                                });

                            </script>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ColeccionTexto, "Colección", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ColeccionTexto, new { htmlAttributes = new { @class = "form-control enGuardar" } })
                                @Html.ValidationMessageFor(model => model.ColeccionTexto, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>

        @if (Model.MovimientoSolicitante != null)
        {
            <div id="solicitanteDIV" class="tab-pane fade">

                <div class="row">
                    <div class="col-md-2">
                        <h3 class="text-center">Solicitante</h3>

                        <div class="text-center">
                            <span class="fa fa-file-text-o fa-10x"></span>
                        </div>
                    </div>


                    <div class="col-md-10">
                        <br />

                        <div class="form-horizontal">

                            @if (listaCampos.Any(a => a == "solNombreSol"))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MovimientoSolicitante.NombreSolicitante, "Solicitante", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.MovimientoSolicitante.NombreSolicitante, new { htmlAttributes = new { @class = "form-control enGuardar" } })
                                        @Html.ValidationMessageFor(model => model.MovimientoSolicitante.NombreSolicitante, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            }

                            @if (listaCampos.Any(a => a == "solCargoSol"))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MovimientoSolicitante.CargoSolicitante, "Cargo", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.MovimientoSolicitante.CargoSolicitante, new { htmlAttributes = new { @class = "form-control enGuardar" } })
                                        @Html.ValidationMessageFor(model => model.MovimientoSolicitante.CargoSolicitante, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            }

                            @if (listaCampos.Any(a => a == "solInstitucion"))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MovimientoSolicitante.ParaInstitucion, "Para la Institución", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.MovimientoSolicitante.ParaInstitucion, new { htmlAttributes = new { @class = "form-control enGuardar" } })
                                        @Html.ValidationMessageFor(model => model.MovimientoSolicitante.ParaInstitucion, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            }

                            @if (listaCampos.Any(a => a == "solNombreRepre"))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MovimientoSolicitante.NombreRepresentante, "Representante", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.MovimientoSolicitante.NombreRepresentante, new { htmlAttributes = new { @class = "form-control enGuardar" } })
                                        @Html.ValidationMessageFor(model => model.MovimientoSolicitante.NombreRepresentante, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            }

                            @if (listaCampos.Any(a => a == "solCargoRepre"))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MovimientoSolicitante.CargoRepresentante, "Cargo", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.MovimientoSolicitante.CargoRepresentante, new { htmlAttributes = new { @class = "form-control enGuardar" } })
                                        @Html.ValidationMessageFor(model => model.MovimientoSolicitante.CargoRepresentante, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            }

                            @if (listaCampos.Any(a => a == "solSede"))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MovimientoSolicitante.Sede, "Sede", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.MovimientoSolicitante.Sede, new { htmlAttributes = new { @class = "form-control enGuardar" } })
                                        @Html.ValidationMessageFor(model => model.MovimientoSolicitante.Sede, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            }

                            @if (listaCampos.Any(a => a == "SolPaisEdo"))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MovimientoSolicitante.PaisEstado, "País / Estado", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.MovimientoSolicitante.PaisEstado, new { htmlAttributes = new { @class = "form-control enGuardar" } })
                                        @Html.ValidationMessageFor(model => model.MovimientoSolicitante.PaisEstado, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            }

                            @if (listaCampos.Any(a => a == "solPeticionRec"))
                            {
                                <div class="form-group col-md-6">
                                    @Html.LabelFor(model => model.MovimientoSolicitante.PeticionRecibida, "Petición Recibida", htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        <div class="checkbox">
                                            @Html.EditorFor(model => model.MovimientoSolicitante.PeticionRecibida)
                                            @Html.ValidationMessageFor(model => model.MovimientoSolicitante.PeticionRecibida, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            }


                            @if (listaCampos.Any(a => a == "solDicCondEspa"))
                            {
                                <div class="form-group col-md-6">
                                    @Html.LabelFor(model => model.MovimientoSolicitante.DictCondEspacio, "Dict. Cond. espacio", htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        <div class="checkbox">
                                            @Html.EditorFor(model => model.MovimientoSolicitante.DictCondEspacio)
                                            @Html.ValidationMessageFor(model => model.MovimientoSolicitante.DictCondEspacio, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            }



                            @if (listaCampos.Any(a => a == "solCartaAcep"))
                            {
                                <div class="form-group col-md-6">
                                    @Html.LabelFor(model => model.MovimientoSolicitante.CartaAceptacion, "Carta aceptación", htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        <div class="checkbox">
                                            @Html.EditorFor(model => model.MovimientoSolicitante.CartaAceptacion)
                                            @Html.ValidationMessageFor(model => model.MovimientoSolicitante.CartaAceptacion, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            }

                            @if (listaCampos.Any(a => a == "solContratoCom"))
                            {
                                <div class="form-group col-md-6">
                                    @Html.LabelFor(model => model.MovimientoSolicitante.ContratoComodato, "Contrato comodato", htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        <div class="checkbox">
                                            @Html.EditorFor(model => model.MovimientoSolicitante.ContratoComodato)
                                            @Html.ValidationMessageFor(model => model.MovimientoSolicitante.ContratoComodato, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            }


                            @if (listaCampos.Any(a => a == "solRevGuion"))
                            {
                                <div class="form-group col-md-6">
                                    @Html.LabelFor(model => model.MovimientoSolicitante.RevisionGuion, "Revisión Guión", htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        <div class="checkbox">
                                            @Html.EditorFor(model => model.MovimientoSolicitante.RevisionGuion)
                                            @Html.ValidationMessageFor(model => model.MovimientoSolicitante.RevisionGuion, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            }

                            @if (listaCampos.Any(a => a == "solCondicConserv"))
                            {
                                <div class="form-group col-md-6">
                                    @Html.LabelFor(model => model.MovimientoSolicitante.CondicionConservacion, "Condición Conservación", htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        <div class="checkbox">
                                            @Html.EditorFor(model => model.MovimientoSolicitante.CondicionConservacion)
                                            @Html.ValidationMessageFor(model => model.MovimientoSolicitante.CondicionConservacion, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            }

                            @if (listaCampos.Any(a => a == "solFacilReport"))
                            {
                                <div class="form-group col-md-6">
                                    @Html.LabelFor(model => model.MovimientoSolicitante.FacilityReport, "Facility Report", htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        <div class="checkbox">
                                            @Html.EditorFor(model => model.MovimientoSolicitante.FacilityReport)
                                            @Html.ValidationMessageFor(model => model.MovimientoSolicitante.FacilityReport, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            }

                            @if (listaCampos.Any(a => a == "solDictSegu"))
                            {
                                <div class="form-group col-md-6">
                                    @Html.LabelFor(model => model.MovimientoSolicitante.DicSeguridad, "Dict. de seguridad", htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        <div class="checkbox">
                                            @Html.EditorFor(model => model.MovimientoSolicitante.DicSeguridad)
                                            @Html.ValidationMessageFor(model => model.MovimientoSolicitante.DicSeguridad, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                            }

                            @if (listaCampos.Any(a => a == "solListAval"))
                            {
                                <div class="form-group col-md-6">
                                    @Html.LabelFor(model => model.MovimientoSolicitante.ListaAvaluo, "Lista avalúo", htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        <div class="checkbox">
                                            @Html.EditorFor(model => model.MovimientoSolicitante.ListaAvaluo)
                                            @Html.ValidationMessageFor(model => model.MovimientoSolicitante.ListaAvaluo, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            }


                            @if (listaCampos.Any(a => a == "solTramFianza"))
                            {
                                <div class="form-group col-md-6">
                                    @Html.LabelFor(model => model.MovimientoSolicitante.TramiteFianza, "Trámites de fianza", htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        <div class="checkbox">
                                            @Html.EditorFor(model => model.MovimientoSolicitante.TramiteFianza)
                                            @Html.ValidationMessageFor(model => model.MovimientoSolicitante.TramiteFianza, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            }

                            @if (listaCampos.Any(a => a == "solPoliSeg"))
                            {
                                <div class="form-group col-md-6">
                                    @Html.LabelFor(model => model.MovimientoSolicitante.PolizaSeguro, "Póliza de Seguro", htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        <div class="checkbox">
                                            @Html.EditorFor(model => model.MovimientoSolicitante.PolizaSeguro)
                                            @Html.ValidationMessageFor(model => model.MovimientoSolicitante.PolizaSeguro, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            }

                            @if (listaCampos.Any(a => a == "solPoliCartas"))
                            {
                                <div class="form-group col-md-6">
                                    @Html.LabelFor(model => model.MovimientoSolicitante.CartasEntradaSalida, "Cartas entr. y recep.", htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        <div class="checkbox">
                                            @Html.EditorFor(model => model.MovimientoSolicitante.CartasEntradaSalida)
                                            @Html.ValidationMessageFor(model => model.MovimientoSolicitante.CartasEntradaSalida, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            }


                        </div>
                    </div>

                </div>


            </div>

        }

        @if (Model.MovimientoExposicion != null)
        {
            <div id="exposicionDIV" class="tab-pane fade">

                <div class="row">
                    <div class="col-md-2">
                        <h3 class="text-center">Exposición</h3>

                        <div class="text-center">
                            <span class="fa fa-object-group fa-10x"></span>
                        </div>
                    </div>
                    <div class="col-md-10">
                        <br />

                        <div class="form-horizontal">

                            @if (listaCampos.Any(a => a == "expoTitulo"))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MovimientoExposicion.Titulo, "Titulo de exposición", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.MovimientoExposicion.Titulo, new { htmlAttributes = new { @class = "form-control enGuardar" } })
                                        @Html.ValidationMessageFor(model => model.MovimientoExposicion.Titulo, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            }

                            @if (listaCampos.Any(a => a == "espoCurador"))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MovimientoExposicion.Curador, "Curador de exposición", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.MovimientoExposicion.Curador, new { htmlAttributes = new { @class = "form-control enGuardar" } })
                                        @Html.ValidationMessageFor(model => model.MovimientoExposicion.Curador, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            }

                            @if (listaCampos.Any(a => a == "expoFechaIni"))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MovimientoExposicion.FechaInicial, "Fecha Inicial de exposición", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        <div class="input-group date" id="MovimientoExposicion_FechaInicialDTP">
                                            @Html.EditorFor(model => model.MovimientoExposicion.FechaInicial, new { htmlAttributes = new { @class = "form-control enGuardar", readOnly = "" } })

                                            <div class="btn btn-primary input-group-addon" data-toggle="tooltip" title="Abrir calendario">
                                                <span class="fa fa-calendar"></span>
                                            </div>

                                        </div>
                                        @Html.ValidationMessageFor(model => model.MovimientoExposicion.FechaInicial, "", new { @class = "text-danger" })
                                    </div>

                                    <script type="text/javascript">

                                        $(function () {

                                            //var fechaMin = fechaLimiteHoy;

                                            alert('@Html.DisplayFor(model => model.MovimientoExposicion.FechaInicial)');
                                            $('#MovimientoExposicion_FechaInicialDTP').datetimepicker({
                                                //defaultDate: '@Html.DisplayFor(model => model.MovimientoExposicion.FechaInicial)',
                                                minDate: new Date(anio, mes - 1, dia), //limitar que no se seleccione fechas pasadas a hoy
                                                format: "DD/MM/YYYY hh:mm A", //formato: dia/mes/año hora:minuto AM/PM
                                                //disabledDates: [
                                                //    moment("12/25/2013"),
                                                //    new Date(2013, 11 - 1, 21),
                                                //    "11/22/2013 00:53"
                                                //],
                                                toolbarPlacement: 'top',
                                                showTodayButton: true,
                                                showClose: true,
                                                ignoreReadonly: true,
                                                useCurrent: false //Important! See issue #1075
                                            });

                                            $('#MovimientoExposicion_FechaInicialDTP').on("dp.change", function (e) {
                                                $('#MovimientoExposicion_FechaInicial').trigger("input");
                                            });

                                            $('#MovimientoExposicion_FechaInicialDTP').on("dp.update", function (e) {
                                                $('#MovimientoExposicion_FechaInicial').trigger("input");
                                            });


                                        });
                                    </script>

                                </div>
                            }

                            @if (listaCampos.Any(a => a == "expoFechaFIn"))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MovimientoExposicion.FechaFinal, "Fecha Final de exposición", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        <div class="input-group date" id="MovimientoExposicion_FechaFinalDTP">
                                            @Html.EditorFor(model => model.MovimientoExposicion.FechaFinal, new { htmlAttributes = new { @class = "form-control enGuardar", readOnly = "" } })

                                            <div class="btn btn-primary input-group-addon" data-toggle="tooltip" title="Abrir calendario">
                                                <span class="fa fa-calendar"></span>
                                            </div>

                                        </div>
                                        @Html.ValidationMessageFor(model => model.MovimientoExposicion.FechaFinal, "", new { @class = "text-danger" })
                                    </div>

                                    <script type="text/javascript">
                                        $(function () {

                                            $('#MovimientoExposicion_FechaFinalDTP').datetimepicker({
                                                format: "DD/MM/YYYY hh:mm A", //formato: dia/mes/año hora:minuto AM/PM
                                                toolbarPlacement: 'top',
                                                showClose: true,
                                                ignoreReadonly: true,
                                                useCurrent: false //Important! See issue #1075
                                            });

                                            $('#MovimientoExposicion_FechaFinalDTP').on("dp.change", function (e) {
                                                $('#MovimientoExposicion_FechaFinal').trigger("input");
                                            });

                                            $('#MovimientoExposicion_FechaFinalDTP').on("dp.update", function (e) {
                                                $('#MovimientoExposicion_FechaFinal').trigger("input");
                                            });


                                            $("#MovimientoExposicion_FechaInicialDTP").on("dp.change", function (e) {
                                                $('#MovimientoExposicion_FechaFinalDTP').data("DateTimePicker").minDate(e.date);
                                            });

                                            $("#MovimientoExposicion_FechaFinalDTP").on("dp.change", function (e) {
                                                $('#MovimientoExposicion_FechaInicialDTP').data("DateTimePicker").maxDate(e.date);
                                            });

                                            //$("#MovimientoExposicion_FechaInicialDTP").trigger("dp.change");


                                            //$('#MovimientoExposicion_FechaFinalDTP').data("DateTimePicker").minDate($("#MovimientoExposicion_FechaInicial").val());


                                        });
                                    </script>

                                </div>
                            }



                        </div>
                    </div>
                </div>



            </div>
        }

        @if (Model.MovimientoResponsable != null)
        {
            <div id="responsableDIV" class="tab-pane fade">

                <div class="row">

                    <div class="col-md-2">
                        <h3 class="text-center">Responsable</h3>

                        <div class="text-center">
                            <span class="fa fa-male fa-10x"></span>
                        </div>
                    </div>

                    <div class="col-md-10">
                        <br />

                        <div class="form-horizontal">

                            @if (listaCampos.Any(a => a == "resNombre"))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MovimientoResponsable.Nombre, "Nombre del responsable", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.MovimientoResponsable.Nombre, new { htmlAttributes = new { @class = "form-control enGuardar" } })
                                        @Html.ValidationMessageFor(model => model.MovimientoResponsable.Nombre, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            }

                            @if (listaCampos.Any(a => a == "resInstitu"))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MovimientoResponsable.Institucion, "Institución", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.MovimientoResponsable.Institucion, new { htmlAttributes = new { @class = "form-control enGuardar" } })
                                        @Html.ValidationMessageFor(model => model.MovimientoResponsable.Institucion, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            }

                            @if (listaCampos.Any(a => a == "resFechaSal"))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MovimientoResponsable.FechaSalida, "Fecha de Salida", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        <div class="input-group date" id="MovimientoResponsable_FechaSalidaDTP">
                                            @Html.EditorFor(model => model.MovimientoResponsable.FechaSalida, new { htmlAttributes = new { @class = "form-control enGuardar", readOnly = "" } })

                                            <div class="btn btn-primary input-group-addon" data-toggle="tooltip" title="Abrir calendario">
                                                <span class="fa fa-calendar"></span>
                                            </div>

                                        </div>
                                        @Html.ValidationMessageFor(model => model.MovimientoResponsable.FechaSalida, "", new { @class = "text-danger" })
                                    </div>

                                    <script type="text/javascript">
                                        $(function () {

                                            $('#MovimientoResponsable_FechaSalidaDTP').datetimepicker({
                                                //defaultDate: "@Model.FechaHoraMovimiento",
                                                minDate: new Date(anio, mes - 1, dia), //limitar que no se seleccione fechas pasadas a hoy
                                                format: "DD/MM/YYYY hh:mm A", //formato: dia/mes/año hora:minuto AM/PM
                                                //disabledDates: [
                                                //    moment("12/25/2013"),
                                                //    new Date(2013, 11 - 1, 21),
                                                //    "11/22/2013 00:53"
                                                //],
                                                toolbarPlacement: 'top',
                                                showTodayButton: true,
                                                showClose: true,
                                                ignoreReadonly: true,
                                                useCurrent: false //Important! See issue #1075
                                            });

                                            $('#MovimientoResponsable_FechaSalidaDTP').on("dp.change", function (e) {
                                                $('#MovimientoResponsable_FechaSalida').trigger("input");
                                            });

                                            $('#MovimientoResponsable_FechaSalidaDTP').on("dp.update", function (e) {
                                                $('#MovimientoResponsable_FechaSalida').trigger("input");
                                            });

                                        });
                                    </script>

                                </div>
                            }






                        </div>
                    </div>

                </div>
            </div>
        }

        @if (Model.MovimientoAutorizacion != null)
        {
            <div id="autorizacionDIV" class="tab-pane fade">
                <div class="row">

                    <div class="col-md-2">
                        <h3 class="text-center">Autorización</h3>

                        <div class="text-center">
                            <span class="fa fa-thumbs-up fa-10x"></span>
                        </div>
                    </div>

                    <div class="col-md-10">
                        <br />

                        <div class="form-horizontal">

                            @if (listaCampos.Any(a => a == "autUsuario1"))
                            {
                                <div class="form-group">

                                    @Html.LabelFor(model => model.MovimientoAutorizacion.Usuario1ID, "Autorización 1", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.DropDownList("MovimientoAutorizacion_Usuario1ID", null, "- Seleccione Autorización 1 -", htmlAttributes: new { @class = "form-control enGuardar" })

                                        @Html.ValidationMessageFor(model => model.MovimientoAutorizacion.Usuario1ID, "", new { @class = "text-danger" })
                                        @Html.HiddenFor(model => model.MovimientoAutorizacion.FechaAutorizacion1)
                                    </div>
                                </div>
                            }

                            @if (listaCampos.Any(a => a == "autUsuario2"))
                            {
                                <div class="form-group">

                                    @Html.LabelFor(model => model.MovimientoAutorizacion.Usuario2ID, "Autorización 2", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.DropDownList("MovimientoAutorizacion_Usuario2ID", null, "- Seleccione Autorización 2 -", htmlAttributes: new { @class = "form-control enGuardar" })

                                        @Html.ValidationMessageFor(model => model.MovimientoAutorizacion.Usuario2ID, "", new { @class = "text-danger" })
                                        @Html.HiddenFor(model => model.MovimientoAutorizacion.FechaAutorizacion2)
                                    </div>
                                </div>
                            }



                        </div>
                    </div>
                </div>
            </div>
        }

        @if (Model.MovimientoTransporte != null)
        {
            <div id="transporteDIV" class="tab-pane fade">
                <div class="row">

                    <div class="col-md-2">
                        <h3 class="text-center">Transporte</h3>

                        <div class="text-center">
                            <span class="fa fa-truck fa-10x"></span>
                        </div>
                    </div>

                    <div class="col-md-10">
                        <br />

                        <div class="form-horizontal">

                            @if (listaCampos.Any(a => a == "transNombre"))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MovimientoTransporte.EmpresaNombre, "Empresa de transporte", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.MovimientoTransporte.EmpresaNombre, new { htmlAttributes = new { @class = "form-control enGuardar" } })
                                        @Html.ValidationMessageFor(model => model.MovimientoTransporte.EmpresaNombre, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            }

                            @if (listaCampos.Any(a => a == "transRecorr"))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MovimientoTransporte.Recorrido, "Recorrido", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.MovimientoTransporte.Recorrido, new { htmlAttributes = new { @class = "form-control enGuardar" } })
                                        @Html.ValidationMessageFor(model => model.MovimientoTransporte.Recorrido, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            }

                            @if (listaCampos.Any(a => a == "transHorario"))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MovimientoTransporte.Horario, "Horarios", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.MovimientoTransporte.Horario, new { htmlAttributes = new { @class = "form-control enGuardar" } })
                                        @Html.ValidationMessageFor(model => model.MovimientoTransporte.Horario, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            }

                            @if (listaCampos.Any(a => a == "transNota"))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MovimientoTransporte.Nota, "Notas", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.MovimientoTransporte.Nota, new { htmlAttributes = new { @class = "form-control enGuardar" } })
                                        @Html.ValidationMessageFor(model => model.MovimientoTransporte.Nota, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            }


                        </div>
                    </div>
                </div>
            </div>
        }

        @if (Model.MovimientoSeguro != null)
        {
            <div id="seguroDIV" class="tab-pane fade">

                <div class="row">

                    <div class="col-md-2">
                        <h3 class="text-center">Seguro</h3>

                        <div class="text-center">
                            <span class="fa fa-shield fa-10x"></span>
                        </div>
                    </div>

                    <div class="col-md-10">
                        <br />

                        <div class="form-horizontal">

                            @if (listaCampos.Any(a => a == "segNombre"))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MovimientoSeguro.AseguradorNombre, "Asegurador", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.MovimientoSeguro.AseguradorNombre, new { htmlAttributes = new { @class = "form-control enGuardar" } })
                                        @Html.ValidationMessageFor(model => model.MovimientoSeguro.AseguradorNombre, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            }

                            @if (listaCampos.Any(a => a == "segPoliza"))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MovimientoSeguro.NoPoliza, "N° Poliza", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.MovimientoSeguro.NoPoliza, new { htmlAttributes = new { @class = "form-control enGuardar" } })
                                        @Html.ValidationMessageFor(model => model.MovimientoSeguro.NoPoliza, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            }


                            @if (listaCampos.Any(a => a == "segFechaIni"))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MovimientoSeguro.FechaInicial, "Fecha Inicial de seguro", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        <div class="input-group date" id="MovimientoSeguro_FechaInicialDTP">
                                            @Html.EditorFor(model => model.MovimientoSeguro.FechaInicial, new { htmlAttributes = new { @class = "form-control enGuardar", readOnly = "" } })

                                            <div class="btn btn-primary input-group-addon" data-toggle="tooltip" title="Abrir calendario">
                                                <span class="fa fa-calendar"></span>
                                            </div>

                                        </div>
                                        @Html.ValidationMessageFor(model => model.MovimientoSeguro.FechaInicial, "", new { @class = "text-danger" })
                                    </div>

                                    <script type="text/javascript">
                                        $(function () {

                                            $('#MovimientoSeguro_FechaInicialDTP').datetimepicker({
                                                format: "DD/MM/YYYY hh:mm A", //formato: dia/mes/año hora:minuto AM/PM
                                                //disabledDates: [
                                                //    moment("12/25/2013"),
                                                //    new Date(2013, 11 - 1, 21),
                                                //    "11/22/2013 00:53"
                                                //],
                                                toolbarPlacement: 'top',
                                                showTodayButton: true,
                                                showClose: true,
                                                ignoreReadonly: true,
                                                useCurrent: false //Important! See issue #1075
                                            });

                                            $('#MovimientoSeguro_FechaInicialDTP').on("dp.change", function (e) {
                                                $('#MovimientoSeguro_FechaInicial').trigger("input");
                                            });

                                            $('#MovimientoSeguro_FechaInicialDTP').on("dp.update", function (e) {
                                                $('#MovimientoSeguro_FechaInicial').trigger("input");
                                            });

                                        });
                                    </script>

                                </div>
                            }

                            @if (listaCampos.Any(a => a == "segFechaFin"))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MovimientoSeguro.FechaFinal, "Fecha Final del seguro", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        <div class="input-group date" id="MovimientoSeguro_FechaFinalDTP">
                                            @Html.EditorFor(model => model.MovimientoSeguro.FechaFinal, new { htmlAttributes = new { @class = "form-control enGuardar", readOnly = "" } })

                                            <div class="btn btn-primary input-group-addon" data-toggle="tooltip" title="Abrir calendario">
                                                <span class="fa fa-calendar"></span>
                                            </div>

                                        </div>
                                        @Html.ValidationMessageFor(model => model.MovimientoSeguro.FechaFinal, "", new { @class = "text-danger" })
                                    </div>

                                    <script type="text/javascript">
                                        $(function () {

                                            $('#MovimientoSeguro_FechaFinalDTP').datetimepicker({
                                                format: "DD/MM/YYYY hh:mm A", //formato: dia/mes/año hora:minuto AM/PM
                                                toolbarPlacement: 'top',
                                                showTodayButton: true,
                                                showClose: true,
                                                ignoreReadonly: true,
                                                useCurrent: false //Important! See issue #1075
                                            });

                                            $('#MovimientoSeguro_FechaFinalDTP').on("dp.change", function (e) {
                                                $('#MovimientoSeguro_FechaFinal').trigger("input");
                                            });

                                            $('#MovimientoSeguro_FechaFinalDTP').on("dp.update", function (e) {
                                                $('#MovimientoSeguro_FechaFinal').trigger("input");
                                            });


                                            $("#MovimientoSeguro_FechaInicialDTP").on("dp.change", function (e) {
                                                $('#MovimientoSeguro_FechaFinalDTP').data("DateTimePicker").minDate(e.date);
                                            });
                                            $("#MovimientoSeguro_FechaFinalDTP").on("dp.change", function (e) {
                                                $('#MovimientoSeguro_FechaInicialDTP').data("DateTimePicker").maxDate(e.date);
                                            });

                                        });
                                    </script>

                                </div>
                            }


                        </div>
                    </div>
                </div>
            </div>
        }

        <div id="piezasDIV" class="tab-pane fade">
            <div class="row">

                <div class="col-md-3">
                    <h3 class="text-center">Lista de Piezas</h3>

                    @*<div id="renderMenuFiltros">
                            @{ Html.RenderAction("MenuFiltros", "Buscador", new { rutaVista = "_ResultadosBusqueda_MovCrear" }); }
                        </div>*@


                    <div id="menuFiltroBuscar">

                        <div class="panel panel-primary panel-collapse">
                            <div class="panel-heading">
                                <h3 class="panel-title text-center">Menu Búsqueda</h3>
                            </div>

                            <!-- Filtros Estaticos -->
                            <ul class="list-group">

                                <li class="list-group-item">
                                    <div class="form-group-sm">
                                        <div class="text-center">
                                            <small>
                                                <b>Filtrar No. de Inventarios</b>
                                                <i class="fa fa-question text-muted" data-toggle="tooltip" data-original-title="Busqueda Unica EJEM: Folio1"></i>
                                                <i class="fa fa-question text-muted" data-toggle="tooltip" data-original-title="Separar por coma ',' cada folio EJEM: Folio1, Folio2"></i>
                                                <i class="fa fa-question text-muted" data-toggle="tooltip" data-original-title="Separar por guión '-' para rangos de folios EJEM: Folio1-Folio9"></i>
                                                <i class="fa fa-question text-muted" data-toggle="tooltip" data-original-title="Combinación de coma y guión EJEM: Folio1, Folio2-Folio9"></i>
                                            </small>
                                        </div>
                                        <div class="input-group">
                                            @Html.DropDownList("LetraFolioID", LetraFolioID, null, htmlAttributes: new { @class = "form-control" })
                                            <span class="input-group-addon"></span>
                                            <input type="text" id="claves" name="claves" value="" class="form-control" />
                                        </div>
                                    </div>
                                </li>

                                <li class="list-group-item panel-footer text-center">
                                    <a href="@Url.Action("BuscarPiezas", "Movimiento", new { tipo = "RangoPiezas" })" class="btn btn-primary buscadorPiezas" data-toggle="tooltip" data-original-title="Buscar obra por numero de inventario"><i class="fa fa-search"></i> Buscar pieza</a>

                                </li>

                                <li class="list-group-item">
                                    <div class="form-group-sm">
                                        <div class="text-center">
                                            <small>
                                                <b>Nombre del guión</b>
                                            </small>

                                        </div>
                                        @Html.DropDownList("GuionID", GuionID, "- Seleccione un guión -", htmlAttributes: new { @class = "form-control" })

                                    </div>
                                </li>

                                <li class="list-group-item panel-footer text-center">
                                    <a href="@Url.Action("BuscarPiezas", "Movimiento", new { tipo = "CargarGuion" })" class="btn btn-primary buscadorPiezas" data-toggle="tooltip" data-original-title="Cargar guion a lista"><i class="fa fa-download"></i> Cargar Guión</a>

                                </li>


                            </ul>

                            <input type="hidden" id="pag" name="pag" value="1" />


                        </div>


                    </div>


                    <div>
                        <p>Ayuda con iconos:</p>

                        <ul>
                            <li><span class="fa fa-puzzle-piece fa-2x"></span> Ver piezas adicionales.</li>
                            <li><span class="fa fa-refresh fa-2x"></span> Actualizar la lista</li>
                            <li><span class="fa fa-trash fa-2x"></span> Eliminar/Quitar</li>
                        </ul>

                    </div>
                </div>

                <div class="col-md-5">

                    <h3 class="text-center">Resultados</h3>

                    <div id="renderResultadosBusqueda">

                    </div>
                </div>

                <div class="col-md-4">
                    <div class="text-center">
                        <h3>
                            Piezas a Mover
                            <span class="btn btn-info btn-xs" id="refrescarListaTemporal" title="Actualizar la lista de piezas a mover" data-toggle="tooltip"><span class="fa fa-refresh"></span></span>
                            <span class="btn btn-danger btn-xs" id="eliminarListaTemporal" title="Quitar todas las piezas a mover" data-toggle="tooltip"><span class="fa fa-trash"></span></span>
                        </h3>

                        <p>Solo a las piezas VALIDAS se les aplicara el movimiento.</p>
                    </div>
                    <div class="well well-sm well-dark">
                        <div id="renderListaTemporal">

                        </div>
                    </div>
                </div>

            </div>


            <script type="text/javascript">

                $('.buscadorPiezas').on("click", function (e) {

                    $.ajaxSetup({ cache: false });

                    //alert(this.href);
                    ////        public ActionResult CargarGuion(int LetraFolioID, Guid? GuionID, string tipo = "", int? pagina = null, string claves = "")

                    var inputLetraFolioID = $('#LetraFolioID');
                    var inputGuionID = $('#GuionID');
                    var inputClaves = $('#claves');
                    var ubicacionOrigenID = "";

                    $("#UbicacionOrigenID option:selected").each(function () {
                        ubicacionOrigenID += $(this)[0].value;
                    });

                    //alert(ubicacionOrigenID);
                    //alert('inputLetraFolioID :' + inputLetraFolioID.val());
                    //alert('inputGuionID :' + inputGuionID.val());
                    //alert('inputPagina :' + inputPagina.val());
                    //alert('inputClaves :' + inputClaves.val());

                    $('#renderResultadosBusqueda').html('' +
                        '<div class="text-center">' +
                            '<p>' +
                                '<span class="text-muted">' +
                                    'Por favor espere' +
                                '</span>' +
                            '</p>' +
                            '<i class="fa fa-spinner fa-pulse fa-12x text-muted"></i>' +
                            '<p>' +
                                'Se estan procedando los resultados...' +
                            '</p>' +
                        '</div>');

                    //alert(this.action);


                    $.ajax({
                        url: this.href,
                        type: 'GET',
                        data: {
                            LetraFolioID: inputLetraFolioID.val(),
                            GuionID: inputGuionID.val(),
                            claves: inputClaves.val(),
                            UbicacionOrigenID: ubicacionOrigenID,
                            listaNombre: 'listaMov'
                        },
                        success: function (result) {
                            $('#renderResultadosBusqueda').html(result); //  Campo que actualizara
                        }
                    });
                    return false;
                });


                $('#refrescarListaTemporal').on("click", function (e) {

                    var ubicacionOrigenID = "";

                    $("#UbicacionOrigenID option:selected").each(function () {
                        ubicacionOrigenID += $(this)[0].value;
                    });

                    //alert("refrescando lista...");
                    $.ajax({
                        url: '@Url.Action("RenderLista", "Movimiento")',
                        type: 'GET',
                        data: {
                            listaNombre: 'listaMov',
                            UbicacionOrigenID: ubicacionOrigenID
                        },
                        success: function (result) {
                            $('#renderListaTemporal').html(result); //  Campo que actualizara
                        }
                    });

                    $('#alertasDiv').load('/Base/_Alertas');


                });


                $('#eliminarListaTemporal').on("click", function (e) {
                    //alert("eliminando lista...");
                    $.ajax({
                        url: '@Url.Action("EliminarLista", "Movimiento")',
                        type: 'GET',
                        data: {
                            listaNombre: 'listaMov'
                        },
                        success: function (result) {
                            $('#refrescarListaTemporal').trigger("click");

                        }
                    });
                })

            </script>





        </div>

        <div id="guardarDIV" class="tab-pane fade">
            <div class="row">
                <div class="col-md-2">
                    <h3 class="text-center">Guardar</h3>

                    <div class="text-center">
                        <span class="fa fa-save fa-10x"></span>
                    </div>

                </div>

                <div class="col-md-10">
                    <br />

                    <div class="col-md-6">
                        <p>Se guardaran las siguientes opciones</p>

                        <ul id="listaGuardar"></ul>
                    </div>

                    <div class="col-md-6">
                        <div class="form-horizontal">

                            <div class="form-group">
                                @Html.LabelFor(model => model.Observaciones, "Observaciones", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Observaciones, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Observaciones, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="text-center">
                                <button type="submit" class="btn btn-primary"><i class="fa fa-save"></i> Guardar Movimiento</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>


            <script type="text/javascript">



                $('.enGuardar').on("change", function (e) {
                    enGuardarActivar(this);
                });
                $('.enGuardar').on("paste", function (e) {
                    enGuardarActivar(this);
                });
                $('.enGuardar').on("input", function (e) {
                    enGuardarActivar(this);
                });
                $('.enGuardar').on("onkeyup", function (e) {
                    enGuardarActivar(this);
                });
                $('.enGuardar').on("focusout", function (e) {
                    enGuardarActivar(this);
                });

                function enGuardarActivar(objeto) {

                    var $id = objeto.id;
                    var es = "";
                    var textoValor = "";
                    var selectValor = "";

                    if ($(objeto).is("input"))
                        es = "input";
                    else if ($(objeto).is("select"))//.is('input:text'))
                        es = "select";


                    var $label = $("label[for='" + $id + "']");
                    var $ul = $('#listaGuardar');
                    var $liItem = $('#texto_' + $id);





                    switch (es) {
                        case "input":
                            textoValor = $(objeto).val();
                            break;
                        case "select":
                            $('#' + $id + ' option:selected').each(function () {
                                selectValor = $(this)[0].value == "0" || $(this)[0].value == 0 || $(this)[0].value == "" ? "" : $(this)[0].value;
                                textoValor = selectValor == "" ? "" : $(this)[0].text;
                            });


                            break;
                    }

                    //si textovalor == "";

                    var liHTML = "";


                    if ($liItem.length) {
                        textoValor == "" ? $liItem.remove() : $liItem.html('<b>' + $label.text() + ': </b>' + textoValor + '</li>');
                    }
                    else {
                        if (textoValor != "") {
                            $ul.append('<li id="texto_' + $id + '"><b>' + $label.text() + ': </b>' + textoValor + '</li>');
                        }

                    }

                };


            </script>

        </div>


    </div>
}


<script type="text/javascript">

    $(function () {
        $('#FechaHoraMovimiento').trigger("input");
        $('#ColeccionTexto').trigger('input');
        $('#UbicacionOrigenID').trigger('change');
    });





    $('#FormMovCrear').submit(function (e) {
        e.preventDefault();
        var validarOK = false;
        validarOK = $(this).validate().valid();
        if (validarOK) {
            $.ajax({
                url: this.action,
                type: this.method,
                data: $(this).serialize(),
                success: function (result) {
                    if (result.success) {
                        //$('#renderListaUbicacion').load(result.url); //  Campo que actualizara
                        //window.location.reload();

                        window.location.href = result.url;

                        //$('#alertasDiv').load('/Base/_Alertas');

                    } else {
                        $('#renderMovimiento').html(''); //  Campo que actualizara
                        $('#renderMovimiento').html(result); //  Campo que actualizara
                    }
                }
            });
        }

        return false;
    });

</script>


<script src="~/Scripts/add.toolTip.js"></script>

